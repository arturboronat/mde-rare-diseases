/**
 * generated by Xtext 2.28.0
 */
package cafev.vform.vFormDsl.util;

import cafev.vform.vFormDsl.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see cafev.vform.vFormDsl.VFormDslPackage
 * @generated
 */
public class VFormDslAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static VFormDslPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VFormDslAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = VFormDslPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VFormDslSwitch<Adapter> modelSwitch =
    new VFormDslSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseFormLayout(FormLayout object)
      {
        return createFormLayoutAdapter();
      }
      @Override
      public Adapter caseFormInput(FormInput object)
      {
        return createFormInputAdapter();
      }
      @Override
      public Adapter caseFormInputBasic(FormInputBasic object)
      {
        return createFormInputBasicAdapter();
      }
      @Override
      public Adapter caseFormInputRange(FormInputRange object)
      {
        return createFormInputRangeAdapter();
      }
      @Override
      public Adapter caseFormInputSelect(FormInputSelect object)
      {
        return createFormInputSelectAdapter();
      }
      @Override
      public Adapter caseOption(Option object)
      {
        return createOptionAdapter();
      }
      @Override
      public Adapter caseDataOption(DataOption object)
      {
        return createDataOptionAdapter();
      }
      @Override
      public Adapter caseEnumOption(EnumOption object)
      {
        return createEnumOptionAdapter();
      }
      @Override
      public Adapter caseNumberOption(NumberOption object)
      {
        return createNumberOptionAdapter();
      }
      @Override
      public Adapter caseFormInputSearch(FormInputSearch object)
      {
        return createFormInputSearchAdapter();
      }
      @Override
      public Adapter caseOptionItem(OptionItem object)
      {
        return createOptionItemAdapter();
      }
      @Override
      public Adapter caseStringOptionItem(StringOptionItem object)
      {
        return createStringOptionItemAdapter();
      }
      @Override
      public Adapter caseIntOptionItem(IntOptionItem object)
      {
        return createIntOptionItemAdapter();
      }
      @Override
      public Adapter caseDataOptionItem(DataOptionItem object)
      {
        return createDataOptionItemAdapter();
      }
      @Override
      public Adapter caseFormInputGroup(FormInputGroup object)
      {
        return createFormInputGroupAdapter();
      }
      @Override
      public Adapter caseData(Data object)
      {
        return createDataAdapter();
      }
      @Override
      public Adapter caseStringData(StringData object)
      {
        return createStringDataAdapter();
      }
      @Override
      public Adapter caseIntData(IntData object)
      {
        return createIntDataAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.FormLayout <em>Form Layout</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.FormLayout
   * @generated
   */
  public Adapter createFormLayoutAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.FormInput <em>Form Input</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.FormInput
   * @generated
   */
  public Adapter createFormInputAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.FormInputBasic <em>Form Input Basic</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.FormInputBasic
   * @generated
   */
  public Adapter createFormInputBasicAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.FormInputRange <em>Form Input Range</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.FormInputRange
   * @generated
   */
  public Adapter createFormInputRangeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.FormInputSelect <em>Form Input Select</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.FormInputSelect
   * @generated
   */
  public Adapter createFormInputSelectAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.Option <em>Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.Option
   * @generated
   */
  public Adapter createOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.DataOption <em>Data Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.DataOption
   * @generated
   */
  public Adapter createDataOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.EnumOption <em>Enum Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.EnumOption
   * @generated
   */
  public Adapter createEnumOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.NumberOption <em>Number Option</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.NumberOption
   * @generated
   */
  public Adapter createNumberOptionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.FormInputSearch <em>Form Input Search</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.FormInputSearch
   * @generated
   */
  public Adapter createFormInputSearchAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.OptionItem <em>Option Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.OptionItem
   * @generated
   */
  public Adapter createOptionItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.StringOptionItem <em>String Option Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.StringOptionItem
   * @generated
   */
  public Adapter createStringOptionItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.IntOptionItem <em>Int Option Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.IntOptionItem
   * @generated
   */
  public Adapter createIntOptionItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.DataOptionItem <em>Data Option Item</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.DataOptionItem
   * @generated
   */
  public Adapter createDataOptionItemAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.FormInputGroup <em>Form Input Group</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.FormInputGroup
   * @generated
   */
  public Adapter createFormInputGroupAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.Data <em>Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.Data
   * @generated
   */
  public Adapter createDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.StringData <em>String Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.StringData
   * @generated
   */
  public Adapter createStringDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link cafev.vform.vFormDsl.IntData <em>Int Data</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see cafev.vform.vFormDsl.IntData
   * @generated
   */
  public Adapter createIntDataAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //VFormDslAdapterFactory
