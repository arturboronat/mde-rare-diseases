/*
 * generated by Xtext 2.25.0
 */
package cafeV.dsl.vforms.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class VformDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cafeV.dsl.vforms.VformDSL.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cFormLayoutKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cFormLayoutAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cFormLayoutFormLayoutParserRuleCall_0_1_0 = (RuleCall)cFormLayoutAssignment_0_1.eContents().get(0);
		private final Keyword cFormInputsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFormInputAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFormInputFormInputParserRuleCall_2_0 = (RuleCall)cFormInputAssignment_2.eContents().get(0);
		
		//Model:
		//    ("formLayout"
		//        formLayout=FormLayout)
		//    "formInputs"
		//        (formInput+=FormInput);
		@Override public ParserRule getRule() { return rule; }
		
		//("formLayout"
		//    formLayout=FormLayout)
		//"formInputs"
		//    (formInput+=FormInput)
		public Group getGroup() { return cGroup; }
		
		//("formLayout"
		//    formLayout=FormLayout)
		public Group getGroup_0() { return cGroup_0; }
		
		//"formLayout"
		public Keyword getFormLayoutKeyword_0_0() { return cFormLayoutKeyword_0_0; }
		
		//formLayout=FormLayout
		public Assignment getFormLayoutAssignment_0_1() { return cFormLayoutAssignment_0_1; }
		
		//FormLayout
		public RuleCall getFormLayoutFormLayoutParserRuleCall_0_1_0() { return cFormLayoutFormLayoutParserRuleCall_0_1_0; }
		
		//"formInputs"
		public Keyword getFormInputsKeyword_1() { return cFormInputsKeyword_1; }
		
		//(formInput+=FormInput)
		public Assignment getFormInputAssignment_2() { return cFormInputAssignment_2; }
		
		//FormInput
		public RuleCall getFormInputFormInputParserRuleCall_2_0() { return cFormInputFormInputParserRuleCall_2_0; }
	}
	public class FormInputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cafeV.dsl.vforms.VformDSL.FormInput");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTextAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTextTextParserRuleCall_0_0 = (RuleCall)cTextAssignment_0.eContents().get(0);
		private final Assignment cCheckboxAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCheckboxCheckboxParserRuleCall_1_0 = (RuleCall)cCheckboxAssignment_1.eContents().get(0);
		private final Assignment cNumberAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cNumberNumberParserRuleCall_2_0 = (RuleCall)cNumberAssignment_2.eContents().get(0);
		private final Assignment cDatAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cDatDatParserRuleCall_3_0 = (RuleCall)cDatAssignment_3.eContents().get(0);
		private final Assignment cRangeAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cRangeRangeParserRuleCall_4_0 = (RuleCall)cRangeAssignment_4.eContents().get(0);
		private final Assignment cSelectAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cSelectSelectParserRuleCall_5_0 = (RuleCall)cSelectAssignment_5.eContents().get(0);
		
		//FormInput:
		//   (text+=Text|checkbox+=Checkbox|number+=Number|dat+=Dat|range+=Range|select+=Select)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(text+=Text|checkbox+=Checkbox|number+=Number|dat+=Dat|range+=Range|select+=Select)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//text+=Text
		public Assignment getTextAssignment_0() { return cTextAssignment_0; }
		
		//Text
		public RuleCall getTextTextParserRuleCall_0_0() { return cTextTextParserRuleCall_0_0; }
		
		//checkbox+=Checkbox
		public Assignment getCheckboxAssignment_1() { return cCheckboxAssignment_1; }
		
		//Checkbox
		public RuleCall getCheckboxCheckboxParserRuleCall_1_0() { return cCheckboxCheckboxParserRuleCall_1_0; }
		
		//number+=Number
		public Assignment getNumberAssignment_2() { return cNumberAssignment_2; }
		
		//Number
		public RuleCall getNumberNumberParserRuleCall_2_0() { return cNumberNumberParserRuleCall_2_0; }
		
		//dat+=Dat
		public Assignment getDatAssignment_3() { return cDatAssignment_3; }
		
		//Dat
		public RuleCall getDatDatParserRuleCall_3_0() { return cDatDatParserRuleCall_3_0; }
		
		//range+=Range
		public Assignment getRangeAssignment_4() { return cRangeAssignment_4; }
		
		//Range
		public RuleCall getRangeRangeParserRuleCall_4_0() { return cRangeRangeParserRuleCall_4_0; }
		
		//select+=Select
		public Assignment getSelectAssignment_5() { return cSelectAssignment_5; }
		
		//Select
		public RuleCall getSelectSelectParserRuleCall_5_0() { return cSelectSelectParserRuleCall_5_0; }
	}
	public class FormLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cafeV.dsl.vforms.VformDSL.FormLayout");
		private final Assignment cLayoutAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cLayoutLayoutEnumRuleCall_0 = (RuleCall)cLayoutAssignment.eContents().get(0);
		
		//FormLayout:
		//    layout=Layout;
		@Override public ParserRule getRule() { return rule; }
		
		//layout=Layout
		public Assignment getLayoutAssignment() { return cLayoutAssignment; }
		
		//Layout
		public RuleCall getLayoutLayoutEnumRuleCall_0() { return cLayoutLayoutEnumRuleCall_0; }
	}
	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cafeV.dsl.vforms.VformDSL.Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTextKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInputNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cInputNameAssignment_3.eContents().get(0);
		
		//Text:
		//    "inputType" "text"
		//    "inputName" inputName=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"inputType" "text"
		//"inputName" inputName=STRING
		public Group getGroup() { return cGroup; }
		
		//"inputType"
		public Keyword getInputTypeKeyword_0() { return cInputTypeKeyword_0; }
		
		//"text"
		public Keyword getTextKeyword_1() { return cTextKeyword_1; }
		
		//"inputName"
		public Keyword getInputNameKeyword_2() { return cInputNameKeyword_2; }
		
		//inputName=STRING
		public Assignment getInputNameAssignment_3() { return cInputNameAssignment_3; }
		
		//STRING
		public RuleCall getInputNameSTRINGTerminalRuleCall_3_0() { return cInputNameSTRINGTerminalRuleCall_3_0; }
	}
	public class CheckboxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cafeV.dsl.vforms.VformDSL.Checkbox");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCheckboxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInputNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cInputNameAssignment_3.eContents().get(0);
		
		//Checkbox:
		//    "inputType" "checkbox"
		//    "inputName" inputName=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"inputType" "checkbox"
		//"inputName" inputName=STRING
		public Group getGroup() { return cGroup; }
		
		//"inputType"
		public Keyword getInputTypeKeyword_0() { return cInputTypeKeyword_0; }
		
		//"checkbox"
		public Keyword getCheckboxKeyword_1() { return cCheckboxKeyword_1; }
		
		//"inputName"
		public Keyword getInputNameKeyword_2() { return cInputNameKeyword_2; }
		
		//inputName=STRING
		public Assignment getInputNameAssignment_3() { return cInputNameAssignment_3; }
		
		//STRING
		public RuleCall getInputNameSTRINGTerminalRuleCall_3_0() { return cInputNameSTRINGTerminalRuleCall_3_0; }
	}
	public class NumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cafeV.dsl.vforms.VformDSL.Number");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNumberKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInputNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cInputNameAssignment_3.eContents().get(0);
		
		//Number:
		//    "inputType" "number"
		//    "inputName" inputName=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"inputType" "number"
		//"inputName" inputName=STRING
		public Group getGroup() { return cGroup; }
		
		//"inputType"
		public Keyword getInputTypeKeyword_0() { return cInputTypeKeyword_0; }
		
		//"number"
		public Keyword getNumberKeyword_1() { return cNumberKeyword_1; }
		
		//"inputName"
		public Keyword getInputNameKeyword_2() { return cInputNameKeyword_2; }
		
		//inputName=STRING
		public Assignment getInputNameAssignment_3() { return cInputNameAssignment_3; }
		
		//STRING
		public RuleCall getInputNameSTRINGTerminalRuleCall_3_0() { return cInputNameSTRINGTerminalRuleCall_3_0; }
	}
	public class DatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cafeV.dsl.vforms.VformDSL.Dat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInputNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cInputNameAssignment_3.eContents().get(0);
		
		//Dat:
		//    "inputType" "date"
		//    "inputName" inputName=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//"inputType" "date"
		//"inputName" inputName=STRING
		public Group getGroup() { return cGroup; }
		
		//"inputType"
		public Keyword getInputTypeKeyword_0() { return cInputTypeKeyword_0; }
		
		//"date"
		public Keyword getDateKeyword_1() { return cDateKeyword_1; }
		
		//"inputName"
		public Keyword getInputNameKeyword_2() { return cInputNameKeyword_2; }
		
		//inputName=STRING
		public Assignment getInputNameAssignment_3() { return cInputNameAssignment_3; }
		
		//STRING
		public RuleCall getInputNameSTRINGTerminalRuleCall_3_0() { return cInputNameSTRINGTerminalRuleCall_3_0; }
	}
	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cafeV.dsl.vforms.VformDSL.Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInputNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cInputNameAssignment_3.eContents().get(0);
		private final Keyword cMinKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMinAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMinINTTerminalRuleCall_5_0 = (RuleCall)cMinAssignment_5.eContents().get(0);
		private final Keyword cMaxKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cMaxAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cMaxINTTerminalRuleCall_7_0 = (RuleCall)cMaxAssignment_7.eContents().get(0);
		
		//Range:
		//    "inputType" "range"
		//    "inputName" inputName=STRING
		//    "min" min=INT
		//    "max" max=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"inputType" "range"
		//"inputName" inputName=STRING
		//"min" min=INT
		//"max" max=INT
		public Group getGroup() { return cGroup; }
		
		//"inputType"
		public Keyword getInputTypeKeyword_0() { return cInputTypeKeyword_0; }
		
		//"range"
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
		
		//"inputName"
		public Keyword getInputNameKeyword_2() { return cInputNameKeyword_2; }
		
		//inputName=STRING
		public Assignment getInputNameAssignment_3() { return cInputNameAssignment_3; }
		
		//STRING
		public RuleCall getInputNameSTRINGTerminalRuleCall_3_0() { return cInputNameSTRINGTerminalRuleCall_3_0; }
		
		//"min"
		public Keyword getMinKeyword_4() { return cMinKeyword_4; }
		
		//min=INT
		public Assignment getMinAssignment_5() { return cMinAssignment_5; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_5_0() { return cMinINTTerminalRuleCall_5_0; }
		
		//"max"
		public Keyword getMaxKeyword_6() { return cMaxKeyword_6; }
		
		//max=INT
		public Assignment getMaxAssignment_7() { return cMaxAssignment_7; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_7_0() { return cMaxINTTerminalRuleCall_7_0; }
	}
	public class SelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cafeV.dsl.vforms.VformDSL.Select");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSelectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInputNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInputNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInputNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cInputNameAssignment_3.eContents().get(0);
		private final Keyword cOptionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cDataOptionAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cDataOptionDataOptionParserRuleCall_5_0_0 = (RuleCall)cDataOptionAssignment_5_0.eContents().get(0);
		private final Assignment cNumberOptionAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cNumberOptionNumberOptionParserRuleCall_5_1_0 = (RuleCall)cNumberOptionAssignment_5_1.eContents().get(0);
		private final Assignment cEnumOptionAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cEnumOptionEnumOptionParserRuleCall_5_2_0 = (RuleCall)cEnumOptionAssignment_5_2.eContents().get(0);
		
		//Select:
		//    "inputType" "select"
		//    "inputName" inputName=STRING
		//    "options" (dataOption=DataOption|numberOption=NumberOption|enumOption=EnumOption);
		@Override public ParserRule getRule() { return rule; }
		
		//"inputType" "select"
		//"inputName" inputName=STRING
		//"options" (dataOption=DataOption|numberOption=NumberOption|enumOption=EnumOption)
		public Group getGroup() { return cGroup; }
		
		//"inputType"
		public Keyword getInputTypeKeyword_0() { return cInputTypeKeyword_0; }
		
		//"select"
		public Keyword getSelectKeyword_1() { return cSelectKeyword_1; }
		
		//"inputName"
		public Keyword getInputNameKeyword_2() { return cInputNameKeyword_2; }
		
		//inputName=STRING
		public Assignment getInputNameAssignment_3() { return cInputNameAssignment_3; }
		
		//STRING
		public RuleCall getInputNameSTRINGTerminalRuleCall_3_0() { return cInputNameSTRINGTerminalRuleCall_3_0; }
		
		//"options"
		public Keyword getOptionsKeyword_4() { return cOptionsKeyword_4; }
		
		//(dataOption=DataOption|numberOption=NumberOption|enumOption=EnumOption)
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//dataOption=DataOption
		public Assignment getDataOptionAssignment_5_0() { return cDataOptionAssignment_5_0; }
		
		//DataOption
		public RuleCall getDataOptionDataOptionParserRuleCall_5_0_0() { return cDataOptionDataOptionParserRuleCall_5_0_0; }
		
		//numberOption=NumberOption
		public Assignment getNumberOptionAssignment_5_1() { return cNumberOptionAssignment_5_1; }
		
		//NumberOption
		public RuleCall getNumberOptionNumberOptionParserRuleCall_5_1_0() { return cNumberOptionNumberOptionParserRuleCall_5_1_0; }
		
		//enumOption=EnumOption
		public Assignment getEnumOptionAssignment_5_2() { return cEnumOptionAssignment_5_2; }
		
		//EnumOption
		public RuleCall getEnumOptionEnumOptionParserRuleCall_5_2_0() { return cEnumOptionEnumOptionParserRuleCall_5_2_0; }
	}
	public class DataOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cafeV.dsl.vforms.VformDSL.DataOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDataKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDataKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDataAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDataDataParserRuleCall_3_0 = (RuleCall)cDataAssignment_3.eContents().get(0);
		
		//DataOption:
		//    "optionType" "data"
		//    "data" (data+=Data)*;
		@Override public ParserRule getRule() { return rule; }
		
		//"optionType" "data"
		//"data" (data+=Data)*
		public Group getGroup() { return cGroup; }
		
		//"optionType"
		public Keyword getOptionTypeKeyword_0() { return cOptionTypeKeyword_0; }
		
		//"data"
		public Keyword getDataKeyword_1() { return cDataKeyword_1; }
		
		//"data"
		public Keyword getDataKeyword_2() { return cDataKeyword_2; }
		
		//(data+=Data)*
		public Assignment getDataAssignment_3() { return cDataAssignment_3; }
		
		//Data
		public RuleCall getDataDataParserRuleCall_3_0() { return cDataDataParserRuleCall_3_0; }
	}
	public class DataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cafeV.dsl.vforms.VformDSL.Data");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLabelKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLabelAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cLabelSTRINGTerminalRuleCall_0_1_0 = (RuleCall)cLabelAssignment_0_1.eContents().get(0);
		private final Keyword cValueKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cStrValAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cStrValSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cStrValAssignment_0_3.eContents().get(0);
		private final Assignment cIntValAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIntValINTTerminalRuleCall_1_0 = (RuleCall)cIntValAssignment_1.eContents().get(0);
		
		//Data:
		//    "label" label=STRING
		//    "value" strVal=STRING|intVal=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"label" label=STRING
		//"value" strVal=STRING|intVal=INT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"label" label=STRING
		//"value" strVal=STRING
		public Group getGroup_0() { return cGroup_0; }
		
		//"label"
		public Keyword getLabelKeyword_0_0() { return cLabelKeyword_0_0; }
		
		//label=STRING
		public Assignment getLabelAssignment_0_1() { return cLabelAssignment_0_1; }
		
		//STRING
		public RuleCall getLabelSTRINGTerminalRuleCall_0_1_0() { return cLabelSTRINGTerminalRuleCall_0_1_0; }
		
		//"value"
		public Keyword getValueKeyword_0_2() { return cValueKeyword_0_2; }
		
		//strVal=STRING
		public Assignment getStrValAssignment_0_3() { return cStrValAssignment_0_3; }
		
		//STRING
		public RuleCall getStrValSTRINGTerminalRuleCall_0_3_0() { return cStrValSTRINGTerminalRuleCall_0_3_0; }
		
		//intVal=INT
		public Assignment getIntValAssignment_1() { return cIntValAssignment_1; }
		
		//INT
		public RuleCall getIntValINTTerminalRuleCall_1_0() { return cIntValINTTerminalRuleCall_1_0; }
	}
	public class NumberOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cafeV.dsl.vforms.VformDSL.NumberOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cNumberKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMinKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMinAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMinINTTerminalRuleCall_3_0 = (RuleCall)cMinAssignment_3.eContents().get(0);
		private final Keyword cMaxKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMaxAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMaxINTTerminalRuleCall_5_0 = (RuleCall)cMaxAssignment_5.eContents().get(0);
		private final Keyword cRangeKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cRangeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRangeINTTerminalRuleCall_7_0 = (RuleCall)cRangeAssignment_7.eContents().get(0);
		
		//NumberOption:
		//    "optionType" "number"
		//    "min" min=INT
		//    "max" max=INT
		//    "range" range=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"optionType" "number"
		//"min" min=INT
		//"max" max=INT
		//"range" range=INT
		public Group getGroup() { return cGroup; }
		
		//"optionType"
		public Keyword getOptionTypeKeyword_0() { return cOptionTypeKeyword_0; }
		
		//"number"
		public Keyword getNumberKeyword_1() { return cNumberKeyword_1; }
		
		//"min"
		public Keyword getMinKeyword_2() { return cMinKeyword_2; }
		
		//min=INT
		public Assignment getMinAssignment_3() { return cMinAssignment_3; }
		
		//INT
		public RuleCall getMinINTTerminalRuleCall_3_0() { return cMinINTTerminalRuleCall_3_0; }
		
		//"max"
		public Keyword getMaxKeyword_4() { return cMaxKeyword_4; }
		
		//max=INT
		public Assignment getMaxAssignment_5() { return cMaxAssignment_5; }
		
		//INT
		public RuleCall getMaxINTTerminalRuleCall_5_0() { return cMaxINTTerminalRuleCall_5_0; }
		
		//"range"
		public Keyword getRangeKeyword_6() { return cRangeKeyword_6; }
		
		//range=INT
		public Assignment getRangeAssignment_7() { return cRangeAssignment_7; }
		
		//INT
		public RuleCall getRangeINTTerminalRuleCall_7_0() { return cRangeINTTerminalRuleCall_7_0; }
	}
	public class EnumOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cafeV.dsl.vforms.VformDSL.EnumOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cOptionTypeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEnumKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cDataKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cStringDataAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cStringDataSTRINGTerminalRuleCall_0_3_0 = (RuleCall)cStringDataAssignment_0_3.eContents().get(0);
		private final Assignment cNumberDataAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberDataSTRINGTerminalRuleCall_1_0 = (RuleCall)cNumberDataAssignment_1.eContents().get(0);
		
		//EnumOption:
		//    "optionType" "enum"
		//    "data" stringData+=(STRING)*|numberData+=(STRING)*;
		@Override public ParserRule getRule() { return rule; }
		
		//"optionType" "enum"
		//"data" stringData+=(STRING)*|numberData+=(STRING)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"optionType" "enum"
		//"data" stringData+=(STRING)*
		public Group getGroup_0() { return cGroup_0; }
		
		//"optionType"
		public Keyword getOptionTypeKeyword_0_0() { return cOptionTypeKeyword_0_0; }
		
		//"enum"
		public Keyword getEnumKeyword_0_1() { return cEnumKeyword_0_1; }
		
		//"data"
		public Keyword getDataKeyword_0_2() { return cDataKeyword_0_2; }
		
		//stringData+=(STRING)*
		public Assignment getStringDataAssignment_0_3() { return cStringDataAssignment_0_3; }
		
		//(STRING)
		public RuleCall getStringDataSTRINGTerminalRuleCall_0_3_0() { return cStringDataSTRINGTerminalRuleCall_0_3_0; }
		
		//numberData+=(STRING)*
		public Assignment getNumberDataAssignment_1() { return cNumberDataAssignment_1; }
		
		//(STRING)
		public RuleCall getNumberDataSTRINGTerminalRuleCall_1_0() { return cNumberDataSTRINGTerminalRuleCall_1_0; }
	}
	
	public class LayoutElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "cafeV.dsl.vforms.VformDSL.Layout");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cHorizontalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cHorizontalHorizontalKeyword_0_0 = (Keyword)cHorizontalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVerticalEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVerticalVerticalKeyword_1_0 = (Keyword)cVerticalEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Layout:
		//    horizontal|vertical
		//;
		public EnumRule getRule() { return rule; }
		
		//horizontal|vertical
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//horizontal
		public EnumLiteralDeclaration getHorizontalEnumLiteralDeclaration_0() { return cHorizontalEnumLiteralDeclaration_0; }
		
		public Keyword getHorizontalHorizontalKeyword_0_0() { return cHorizontalHorizontalKeyword_0_0; }
		
		//vertical
		public EnumLiteralDeclaration getVerticalEnumLiteralDeclaration_1() { return cVerticalEnumLiteralDeclaration_1; }
		
		public Keyword getVerticalVerticalKeyword_1_0() { return cVerticalVerticalKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final FormInputElements pFormInput;
	private final FormLayoutElements pFormLayout;
	private final TextElements pText;
	private final CheckboxElements pCheckbox;
	private final NumberElements pNumber;
	private final DatElements pDat;
	private final RangeElements pRange;
	private final SelectElements pSelect;
	private final DataOptionElements pDataOption;
	private final DataElements pData;
	private final NumberOptionElements pNumberOption;
	private final EnumOptionElements pEnumOption;
	private final LayoutElements eLayout;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public VformDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pFormInput = new FormInputElements();
		this.pFormLayout = new FormLayoutElements();
		this.pText = new TextElements();
		this.pCheckbox = new CheckboxElements();
		this.pNumber = new NumberElements();
		this.pDat = new DatElements();
		this.pRange = new RangeElements();
		this.pSelect = new SelectElements();
		this.pDataOption = new DataOptionElements();
		this.pData = new DataElements();
		this.pNumberOption = new NumberOptionElements();
		this.pEnumOption = new EnumOptionElements();
		this.eLayout = new LayoutElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("cafeV.dsl.vforms.VformDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    ("formLayout"
	//        formLayout=FormLayout)
	//    "formInputs"
	//        (formInput+=FormInput);
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//FormInput:
	//   (text+=Text|checkbox+=Checkbox|number+=Number|dat+=Dat|range+=Range|select+=Select)*;
	public FormInputElements getFormInputAccess() {
		return pFormInput;
	}
	
	public ParserRule getFormInputRule() {
		return getFormInputAccess().getRule();
	}
	
	//FormLayout:
	//    layout=Layout;
	public FormLayoutElements getFormLayoutAccess() {
		return pFormLayout;
	}
	
	public ParserRule getFormLayoutRule() {
		return getFormLayoutAccess().getRule();
	}
	
	//Text:
	//    "inputType" "text"
	//    "inputName" inputName=STRING;
	public TextElements getTextAccess() {
		return pText;
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}
	
	//Checkbox:
	//    "inputType" "checkbox"
	//    "inputName" inputName=STRING;
	public CheckboxElements getCheckboxAccess() {
		return pCheckbox;
	}
	
	public ParserRule getCheckboxRule() {
		return getCheckboxAccess().getRule();
	}
	
	//Number:
	//    "inputType" "number"
	//    "inputName" inputName=STRING;
	public NumberElements getNumberAccess() {
		return pNumber;
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	//Dat:
	//    "inputType" "date"
	//    "inputName" inputName=STRING;
	public DatElements getDatAccess() {
		return pDat;
	}
	
	public ParserRule getDatRule() {
		return getDatAccess().getRule();
	}
	
	//Range:
	//    "inputType" "range"
	//    "inputName" inputName=STRING
	//    "min" min=INT
	//    "max" max=INT;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}
	
	//Select:
	//    "inputType" "select"
	//    "inputName" inputName=STRING
	//    "options" (dataOption=DataOption|numberOption=NumberOption|enumOption=EnumOption);
	public SelectElements getSelectAccess() {
		return pSelect;
	}
	
	public ParserRule getSelectRule() {
		return getSelectAccess().getRule();
	}
	
	//DataOption:
	//    "optionType" "data"
	//    "data" (data+=Data)*;
	public DataOptionElements getDataOptionAccess() {
		return pDataOption;
	}
	
	public ParserRule getDataOptionRule() {
		return getDataOptionAccess().getRule();
	}
	
	//Data:
	//    "label" label=STRING
	//    "value" strVal=STRING|intVal=INT;
	public DataElements getDataAccess() {
		return pData;
	}
	
	public ParserRule getDataRule() {
		return getDataAccess().getRule();
	}
	
	//NumberOption:
	//    "optionType" "number"
	//    "min" min=INT
	//    "max" max=INT
	//    "range" range=INT;
	public NumberOptionElements getNumberOptionAccess() {
		return pNumberOption;
	}
	
	public ParserRule getNumberOptionRule() {
		return getNumberOptionAccess().getRule();
	}
	
	//EnumOption:
	//    "optionType" "enum"
	//    "data" stringData+=(STRING)*|numberData+=(STRING)*;
	public EnumOptionElements getEnumOptionAccess() {
		return pEnumOption;
	}
	
	public ParserRule getEnumOptionRule() {
		return getEnumOptionAccess().getRule();
	}
	
	//enum Layout:
	//    horizontal|vertical
	//;
	public LayoutElements getLayoutAccess() {
		return eLayout;
	}
	
	public EnumRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
