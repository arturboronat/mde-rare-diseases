/*
 * generated by Xtext 2.25.0
 */
package cafeV.dsl.vforms.serializer;

import cafeV.dsl.vforms.services.VformDSLGrammarAccess;
import cafeV.dsl.vforms.vformDSL.Checkbox;
import cafeV.dsl.vforms.vformDSL.Dat;
import cafeV.dsl.vforms.vformDSL.Data;
import cafeV.dsl.vforms.vformDSL.DataOption;
import cafeV.dsl.vforms.vformDSL.EnumOption;
import cafeV.dsl.vforms.vformDSL.FormInput;
import cafeV.dsl.vforms.vformDSL.FormLayout;
import cafeV.dsl.vforms.vformDSL.Group;
import cafeV.dsl.vforms.vformDSL.Model;
import cafeV.dsl.vforms.vformDSL.NumberOption;
import cafeV.dsl.vforms.vformDSL.Range;
import cafeV.dsl.vforms.vformDSL.Search;
import cafeV.dsl.vforms.vformDSL.Select;
import cafeV.dsl.vforms.vformDSL.Text;
import cafeV.dsl.vforms.vformDSL.VformDSLPackage;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class VformDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private VformDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == VformDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case VformDSLPackage.CHECKBOX:
				sequence_Checkbox(context, (Checkbox) semanticObject); 
				return; 
			case VformDSLPackage.DAT:
				sequence_Dat(context, (Dat) semanticObject); 
				return; 
			case VformDSLPackage.DATA:
				sequence_Data(context, (Data) semanticObject); 
				return; 
			case VformDSLPackage.DATA_OPTION:
				sequence_DataOption(context, (DataOption) semanticObject); 
				return; 
			case VformDSLPackage.ENUM_OPTION:
				sequence_EnumOption(context, (EnumOption) semanticObject); 
				return; 
			case VformDSLPackage.FORM_INPUT:
				sequence_FormInput(context, (FormInput) semanticObject); 
				return; 
			case VformDSLPackage.FORM_LAYOUT:
				sequence_FormLayout(context, (FormLayout) semanticObject); 
				return; 
			case VformDSLPackage.GROUP:
				sequence_Group(context, (Group) semanticObject); 
				return; 
			case VformDSLPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case VformDSLPackage.NUMBER:
				sequence_Number(context, (cafeV.dsl.vforms.vformDSL.Number) semanticObject); 
				return; 
			case VformDSLPackage.NUMBER_OPTION:
				sequence_NumberOption(context, (NumberOption) semanticObject); 
				return; 
			case VformDSLPackage.RANGE:
				sequence_Range(context, (Range) semanticObject); 
				return; 
			case VformDSLPackage.SEARCH:
				sequence_Search(context, (Search) semanticObject); 
				return; 
			case VformDSLPackage.SELECT:
				sequence_Select(context, (Select) semanticObject); 
				return; 
			case VformDSLPackage.TEXT:
				sequence_Text(context, (Text) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Checkbox returns Checkbox
	 *
	 * Constraint:
	 *     inputName=STRING
	 */
	protected void sequence_Checkbox(ISerializationContext context, Checkbox semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VformDSLPackage.Literals.CHECKBOX__INPUT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VformDSLPackage.Literals.CHECKBOX__INPUT_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCheckboxAccess().getInputNameSTRINGTerminalRuleCall_5_0(), semanticObject.getInputName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Dat returns Dat
	 *
	 * Constraint:
	 *     inputName=STRING
	 */
	protected void sequence_Dat(ISerializationContext context, Dat semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VformDSLPackage.Literals.DAT__INPUT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VformDSLPackage.Literals.DAT__INPUT_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDatAccess().getInputNameSTRINGTerminalRuleCall_5_0(), semanticObject.getInputName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataOption returns DataOption
	 *
	 * Constraint:
	 *     data+=Data+
	 */
	protected void sequence_DataOption(ISerializationContext context, DataOption semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Data returns Data
	 *
	 * Constraint:
	 *     (label=STRING (strVal=STRING | intVal=INT))
	 */
	protected void sequence_Data(ISerializationContext context, Data semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EnumOption returns EnumOption
	 *
	 * Constraint:
	 *     (stringData+=STRING+ | numberData+=INT+)
	 */
	protected void sequence_EnumOption(ISerializationContext context, EnumOption semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FormInput returns FormInput
	 *
	 * Constraint:
	 *     (
	 *         text+=Text | 
	 *         checkbox+=Checkbox | 
	 *         number+=Number | 
	 *         dat+=Dat | 
	 *         range+=Range | 
	 *         select+=Select | 
	 *         search+=Search | 
	 *         group+=Group
	 *     )
	 */
	protected void sequence_FormInput(ISerializationContext context, FormInput semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FormLayout returns FormLayout
	 *
	 * Constraint:
	 *     layout=Layout
	 */
	protected void sequence_FormLayout(ISerializationContext context, FormLayout semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VformDSLPackage.Literals.FORM_LAYOUT__LAYOUT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VformDSLPackage.Literals.FORM_LAYOUT__LAYOUT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFormLayoutAccess().getLayoutLayoutEnumRuleCall_0(), semanticObject.getLayout());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Group returns Group
	 *
	 * Constraint:
	 *     (inputName=STRING groupInputs+=[FormInput|ID]*)
	 */
	protected void sequence_Group(ISerializationContext context, Group semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (formLayout=FormLayout formInput+=FormInput*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NumberOption returns NumberOption
	 *
	 * Constraint:
	 *     (min=INT max=INT range=INT)
	 */
	protected void sequence_NumberOption(ISerializationContext context, NumberOption semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VformDSLPackage.Literals.NUMBER_OPTION__MIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VformDSLPackage.Literals.NUMBER_OPTION__MIN));
			if (transientValues.isValueTransient(semanticObject, VformDSLPackage.Literals.NUMBER_OPTION__MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VformDSLPackage.Literals.NUMBER_OPTION__MAX));
			if (transientValues.isValueTransient(semanticObject, VformDSLPackage.Literals.NUMBER_OPTION__RANGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VformDSLPackage.Literals.NUMBER_OPTION__RANGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberOptionAccess().getMinINTTerminalRuleCall_5_0(), semanticObject.getMin());
		feeder.accept(grammarAccess.getNumberOptionAccess().getMaxINTTerminalRuleCall_8_0(), semanticObject.getMax());
		feeder.accept(grammarAccess.getNumberOptionAccess().getRangeINTTerminalRuleCall_11_0(), semanticObject.getRange());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Number returns Number
	 *
	 * Constraint:
	 *     inputName=STRING
	 */
	protected void sequence_Number(ISerializationContext context, cafeV.dsl.vforms.vformDSL.Number semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VformDSLPackage.Literals.NUMBER__INPUT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VformDSLPackage.Literals.NUMBER__INPUT_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNumberAccess().getInputNameSTRINGTerminalRuleCall_5_0(), semanticObject.getInputName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Range returns Range
	 *
	 * Constraint:
	 *     (inputName=STRING min=INT max=INT)
	 */
	protected void sequence_Range(ISerializationContext context, Range semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VformDSLPackage.Literals.RANGE__INPUT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VformDSLPackage.Literals.RANGE__INPUT_NAME));
			if (transientValues.isValueTransient(semanticObject, VformDSLPackage.Literals.RANGE__MIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VformDSLPackage.Literals.RANGE__MIN));
			if (transientValues.isValueTransient(semanticObject, VformDSLPackage.Literals.RANGE__MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VformDSLPackage.Literals.RANGE__MAX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRangeAccess().getInputNameSTRINGTerminalRuleCall_5_0(), semanticObject.getInputName());
		feeder.accept(grammarAccess.getRangeAccess().getMinINTTerminalRuleCall_8_0(), semanticObject.getMin());
		feeder.accept(grammarAccess.getRangeAccess().getMaxINTTerminalRuleCall_11_0(), semanticObject.getMax());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Search returns Search
	 *
	 * Constraint:
	 *     (inputName=STRING (stringData+=STRING+ | numberData+=INT+ | data+=Data+)?)
	 */
	protected void sequence_Search(ISerializationContext context, Search semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Select returns Select
	 *
	 * Constraint:
	 *     (inputName=STRING (dataOption=DataOption | enumOption=EnumOption | numberOption=NumberOption))
	 */
	protected void sequence_Select(ISerializationContext context, Select semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Text returns Text
	 *
	 * Constraint:
	 *     inputName=STRING
	 */
	protected void sequence_Text(ISerializationContext context, Text semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, VformDSLPackage.Literals.TEXT__INPUT_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, VformDSLPackage.Literals.TEXT__INPUT_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTextAccess().getInputNameSTRINGTerminalRuleCall_5_0(), semanticObject.getInputName());
		feeder.finish();
	}
	
	
}
